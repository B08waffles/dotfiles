#+title: Config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+AUTHOR: Brandon Kane
#+auto_tangle: t

* Table of Contents :toc:
- [[#doom-emacs-config][Doom Emacs Config]]
  - [[#theme-user-email-and-defaults][Theme, user, email and defaults]]
  - [[#fonts][Fonts]]
  - [[#org-roam][Org-roam]]
  - [[#beacon][Beacon]]
  - [[#transparency][Transparency]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#set-font-sizes-for-each-header-level-in-org][Set font sizes for each header level in Org]]
  - [[#source-code-block-syntax-highlighting][Source Code Block Syntax Highlighting]]
  - [[#runtime-performance][RUNTIME PERFORMANCE]]
  - [[#recent-files][Recent Files]]
  - [[#associate-a-content-type][Associate a content type]]
  - [[#lets-discord-see-doom-is-running][Lets Discord see Doom is running]]

* Doom Emacs Config
** Theme, user, email and defaults
This part is where we define the theme and the main org directory, most of this is default.
#+BEGIN_SRC emacs-lisp
;;===============
;;||||\   ||  /|
;;||  ||  || |/
;;|||||   |||
;;||  ||  || |\
;;||||/   ||  \|
;;===============
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Brandon Kane"
      user-mail-address "brandonkane23167@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

** Fonts
This is where we set our fonts.

#+BEGIN_SRC emacs-lisp

;; Font setup
(setq doom-font (font-spec :family "FuraCode Nerd Font Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "Source Serif 4 SmText" :size 14)
      doom-big-font (font-spec :family "FuraCode Nerd Font Mono" :size 24))
(after! doom-themes
        (setq doom-themes-enable-bold t
              doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

** Org-roam
Org roam directory and org-journal directory are setup here.

#+BEGIN_SRC emacs-lisp
(after! org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (setq org-roam-directory (concat org-directory "RoamNotes"))
    (setq org-roam-complete-everywhere t)
    (setq org-roam-capture-templates
        '(
            ("d" "default" plain "%?"
            :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}n<t") :unnarrowed t)
            ("p" "powerlake" plain "* Topic: %?"
            :target (file+head "work/powerlake/%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Powerlake Work") :unnarrowed t)
            ("u" "utility" plain
            "* Topic: %?"
            :target (file+head "utility/%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Utility") :unnarrowed t)
            ("w" "work" plain
            "* Topic: %?"
            :target (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Work") :unnarrowed t)
            ("s" "social" plain
            "* Topic: %?"
            :target (file+head "social/%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: Social") :unnarrowed t)
            ("n" "news" plain "* Topic: %?"
            :target (file+head "news/%<%Y%m%d%H%M%S>-${slug}.org"
                               "#+title: ${title}\n#+filetags: News") :unnarrowed t)
        )
    )
    :config
    (org-roam-setup)
)
;; Org configs override
(setq
;      org-roam-directory (concat org-directory "RoamNotes")
      org-journal-dir (concat org-directory "journal")
      org-journal-file-format "%Y-%m-%d.org")
;(org-roam-capture-templates
;;   '(("d" "default" plain
;      "%?"
;      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
;      :unnarrowed t)))
;("l" "programming language" plain
; "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
; :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
; :unnarrowed t)
;      )
#+END_SRC

** Beacon
This is a helper tool that shows a quick animation when scrolling to show where the mouse/pointer lands.

#+BEGIN_SRC emacs-lisp

;; Beacon
(beacon-mode 1)
#+END_SRC

** Transparency
Here we set the desired opacity from 0 - 100.

#+BEGIN_SRC emacs-lisp
;  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
;  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;; Opacity
(add-to-list 'default-frame-alist '(alpha . 100))
#+END_SRC

** Org-auto-tangle
This is the default setup for org-auto-tangle, it automates the exportation of code blocks from org files.

#+BEGIN_SRC emacs-lisp

;; org-auto-tangle setup
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+END_SRC

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** RAINBOW MODE
Rainbox mode displays the actual color for any hex value color. It's such a
nice feature that I wanted it turned on all the time, regardless of what mode I
am in. The following creates a global minor mode for rainbow-mode and enables
it.

#+begin_src emacs-lisp
;;(define-globalized-minor-mode global-rainbow-mode rainbow-mode
;;  (lambda () (rainbow-mode 1)))
;;(global-rainbow-mode 1 )
#+end_src

** Set font sizes for each header level in Org
You can set the Org heading levels to be different font sizes.  So I choose to
have level 1 headings to be 140% in height, level 2 to be 130%, etc.  Other
interesting things you could play with include adding :foreground color and/or
:background color if you want to override the theme colors.
#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)

#+end_src

** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src

** RUNTIME PERFORMANCE
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

** Recent Files
Persist recently accessed files across sessions regardless of how we exit Emacs.
#+BEGIN_SRC emacs-lisp
;; Update recent files history list every 5 minutes
(run-at-time nil (* 5 60) 'recentf-save-list)
#+END_SRC

** Associate a content type
I want .razor to be run in the web major mode.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.razor\\'" . web-mode))
#+END_SRC

** Lets Discord see Doom is running
#+BEGIN_SRC emacs-lisp
(use-package! elcord
;  :straight t
;  :disabled dw/is-termux
;  :custom
;  (elcord-display-buffer-details nil)
  :config
  (elcord-mode))
#+END_SRC
